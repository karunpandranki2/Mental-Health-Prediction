#CODE1:
# Mental Health Prediction Using Decision Tree
# Upload your 'k.csv' file before running the code

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load dataset
from google.colab import files
uploaded = files.upload()

# Read the uploaded CSV
df = pd.read_csv("k.csv")

# Drop columns not needed (example: Timestamp)
if 'Timestamp' in df.columns:
    df = df.drop('Timestamp', axis=1)

# Encode categorical features
label_encoders = {}
for column in df.columns:
    if df[column].dtype == 'object':
        le = LabelEncoder()
        df[column] = le.fit_transform(df[column].astype(str))
        label_encoders[column] = le

# Set features and label
X = df.drop('treatment', axis=1)
y = df['treatment']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Decision Tree
model = DecisionTreeClassifier(random_state=0)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Confusion Matrix and Classification Report
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Predicting probabilities like in the paper
sample_input = X_test.iloc[0:1]
sample_pred = model.predict(sample_input)[0]
sample_prob = model.predict_proba(sample_input)[0][1]
print("\nSample Prediction:", sample_pred)
print("Predicted Probability of Needing Treatment:", round(sample_prob, 2))

# Meaning based on probability
if sample_prob > 0.63:
    print("ğŸŸ¥ User likely has a mental illness.")
elif 0.3 <= sample_prob <= 0.63:
    print("ğŸŸ¨ User may develop a mental illness.")
else:
    print("ğŸŸ© User is unlikely to have a mental illness.")

